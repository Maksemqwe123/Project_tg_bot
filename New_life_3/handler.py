from aiogram.dispatcher.filters import Text, Command
from weather_tg_bot import dp, bot, types
from New_life_3.weatear import ru
from config import OPEN_WEATHER_TOKEN, ADMIN_ID
from buttons import user_kb, house_or_street, help_assistant_house, help_assistant_street, cities, menu
from parser_pizza import list_pizza
from parser_kinogo import kinogo_urls, kinogo_decription
from parser_litres import list_urls, litres_description
from cook_parser import cook_urls, cook_description
from parser_cinema import film_urls, title_film, time_film
from parser_restaurant_pizza import pizza_urls, pizza_title, pizza_address, pizza_time_work
from parser_coffee import coffee_urls, coffee_title
from sqlite import Database
import requests
import random
import datetime
import os

db = Database('database.db')

count_of_attempts = 1
number = random.randint(1, 12)
print(number)


@dp.message_handler(commands='start')
async def start_Message(message: types.Message):
    if message.chat.type == 'private':
        if not db.create_profile(message.from_user.id):
            db.edit_profile(message.from_user.id)
        await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∂–µ—Ç –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å, –≤ —Å–≤—è–∑–∏ —Å –ø–æ–≥–æ–¥–æ–π',
                             reply_markup=user_kb)
        await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?üå§')


@dp.message_handler(commands='sendall')
async def send_all(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == ADMIN_ID:
            text = message.text[9:]
            users = db.get_users()
            for row in users:
                try:
                    await bot.send_message(row[0], text)

                except:
                    db.set_active(row[0], 0)

            await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")


@dp.message_handler(Text(equals=cities, ignore_case=True))
async def today(message: types.Message):
    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={OPEN_WEATHER_TOKEN}&units=metric&lang={ru}"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]
        weather_description = data["weather"][0]["description"]
        wind = data["wind"]["speed"]

        await message.answer(f'–í –≥–æ—Ä–æ–¥–µ: {city} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {cur_weather} C \n–û–∂–∏–¥–∞–µ—Ç—Å—è: {weather_description}\n'
                             f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/c', reply_markup=house_or_street)

        if cur_weather < 5 and cur_weather > -4:
            await message.answer('c–µ–≥–æ–¥–Ω—è –Ω–∞ —É–ª–∏—Ü–µ –Ω–µ–º–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ —Å–ª—è–∫–æ—Ç—å –∏ –≥–æ–ª–æ–ª—ë–¥,'
                                 '–º–æ–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞ –∏–ª–∏ –ø–æ–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É')

        elif cur_weather < -4 and cur_weather > -8:
            await message.answer('—Å–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–Ω—å—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –µ—â—ë –ø–æ–µ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º')

        elif cur_weather < -9 and cur_weather > -16:
            await message.answer('—Å–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –¥–æ–≤–æ–ª—å–Ω–æ —Ö–æ–ª–æ–¥–Ω–æ, –ø–æ—Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞,'
                                 ' –Ω–æ –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —Å—Ç—Ä–∞—à–µ–Ω —Ö–æ–ª–æ–¥, –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∫—É–¥–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å  ')

        elif cur_weather < -16:
            await message.answer('c–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ, –æ—Å—Ç–∞–Ω—å—Å—è –ª—É—á—à–µ –¥–æ–º–∞')


    except:
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")


@dp.message_handler(Text(equals='–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∞—Ç—å –¥–æ–º–∞ ?üè†', ignore_case=True))
async def leisure(message: types.Message):
    await message.answer('–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ø–æ—á–∏—Ç–∞—Ç—å —Ñ–∏–ª—å–º/–∫–Ω–∏–≥—É, –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º, —è –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª –∑–∞–≤–∞—Ä–∏—Ç—å —á–∞—è/–∫–æ—Ñ–µ.\n'
                         '–º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫ –ª–µ–≥–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∫—É—Å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç,'
                         '—Ç–∞–∫ –∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ø–∏—Ü—Ü—ã', reply_markup=help_assistant_house)


@dp.message_handler(Text(equals='–ö–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ ?üö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ', ignore_case=True))
async def street(message: types.Message):
    await message.answer('–ú–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ/—Ç–µ–∞—Ç—Ä, –º–æ–∂–Ω–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∫–∞—Ç–∞—è—Å—å –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö.'
                         '–í —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ/—á–∞—è. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É –ø–∞—Ä–∫—É,'
                         '–∞ –≤ –∫–æ–Ω—Ü–µ –≤–µ—á–µ—Ä–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –ø–æ–∫—É—à–∞—Ç—å –ø–∏—Ü—Ü—ã', reply_markup=help_assistant_street)


@dp.message_handler(Text(equals='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µüå§', ignore_case=True))
async def back(message: types.Message):
    await message.answer('–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–∂–∏–¥–∞–µ—Ç—Å—è...', reply_markup=user_kb)


@dp.message_handler(Text(equals='–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ÉüîÆ', ignore_case=True))
async def game(message: types.Message):
    global count_of_attempts, number

    if count_of_attempts == 1:
        await message.answer(f'–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ \n—è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20, –ø–æ–ø—Ä–æ–±—É–π –µ–≥–æ —É–≥–∞–¥–∞—Ç—åüòâ', reply_markup=menu)
    else:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æüßê')


@dp.message_handler(Text(equals='–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìã', ignore_case=True))
async def back(message: types.Message):
    await message.answer('—Å–µ–∫—É–Ω–¥—É‚è±', reply_markup=house_or_street)


@dp.message_handler(Text(equals='–ö–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ ?üö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ', ignore_case=True))
async def back_street(message: types.Message):
    await message.answer('–°–µ–π—á–∞—Å –ø–æ–¥—Å–∫–∞–∂—É', reply_markup=help_assistant_street)


@dp.message_handler(Text(equals='–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∞—Ç—å –¥–æ–º–∞ ?üè†', ignore_case=True))
async def back_street(message: types.Message):
    await message.answer('–°–µ–π—á–∞—Å –ø–æ–¥—Å–∫–∞–∂—É', reply_markup=help_assistant_house)


@dp.message_handler(Text(equals='–ß—Ç–æ –∑–∞ –∞–∫—Ü–∏—è –Ω–∞ –ø–∏—Ü—Ü—É?üçï', ignore_case=True))
async def pizza(message: types.Message):
    await message.answer(f'{list_pizza}')


@dp.message_handler(Text(equals='–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?üé¨', ignore_case=True))
async def kinogo(message: types.Message):
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {kinogo_decription[1]} \nCc—ã–ª–∫–∞: {kinogo_urls[1]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {kinogo_decription[2]} \nCc—ã–ª–∫–∞: {kinogo_urls[2]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {kinogo_decription[3]} \nCc—ã–ª–∫–∞: {kinogo_urls[3]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {kinogo_decription[4]} \nCc—ã–ª–∫–∞: {kinogo_urls[4]}\n')


@dp.message_handler(Text(equals='–ö–∞–∫—É—é –∫–Ω–∏–≥—É –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å?üìö', ignore_case=True))
async def book(message: types.Message):
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ:{litres_description[1]} \nCc—ã–ª–∫–∞: {list_urls[1]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ:{litres_description[2]} \nCc—ã–ª–∫–∞: {list_urls[2]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ:{litres_description[3]} \nCc—ã–ª–∫–∞: {list_urls[3]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ:{litres_description[4]} \nCc—ã–ª–∫–∞: {list_urls[4]}\n')


@dp.message_handler(Text(equals='–ö–∞–∫–æ–π –¥–µ—Å–µ—Ä—Ç –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?üßÅ', ignore_case=True))
async def cook(message: types.Message):
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {cook_description[1]} \nCc—ã–ª–∫–∞: {cook_urls[1]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {cook_description[2]} \nCc—ã–ª–∫–∞: {cook_urls[2]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {cook_description[3]} \nCc—ã–ª–∫–∞: {cook_urls[3]}\n')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {cook_description[4]} \nCc—ã–ª–∫–∞: {cook_urls[4]}\n')


@dp.message_handler(Text(equals='–ù–∞ –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å ?üé¨', ignore_case=True))
async def cinema(message: types.Message):
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {title_film[1]} \nCc—ã–ª–∫–∞: {film_urls[1]}\n–í—Ä–µ–º—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å:{time_film[1]}')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {title_film[2]} \nCc—ã–ª–∫–∞: {film_urls[2]}\n–í—Ä–µ–º—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å:{time_film[2]}')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {title_film[3]} \nCc—ã–ª–∫–∞: {film_urls[3]}\n–í—Ä–µ–º—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å:{time_film[3]}')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {title_film[4]} \nCc—ã–ª–∫–∞: {film_urls[4]}\n–í—Ä–µ–º—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å:{time_film[4]}')


@dp.message_handler(Text(equals='–ö—É–¥–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –ø–æ–µ—Å—Ç—å ?üçΩ', ignore_case=True))
async def cinema(message: types.Message):
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {pizza_title[0]} \nCc—ã–ª–∫–∞: {pizza_urls[0]} \n–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {pizza_address[0]} '
                         f'\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {pizza_time_work[0]}')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {pizza_title[1]} \nCc—ã–ª–∫–∞: {pizza_urls[1]} \n–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {pizza_address[1]} '
                         f'\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {pizza_time_work[1]}')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {pizza_title[2]} \nCc—ã–ª–∫–∞: {pizza_urls[2]} \n–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {pizza_address[2]} '
                         f'\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {pizza_time_work[2]}')


@dp.message_handler(Text(equals='–ì–¥–µ –∏ –∫–∞–∫–æ–π –∫–æ—Ñ–µ –º–æ–∂–Ω–æ –≤—ã–ø–∏—Ç—å?‚òïÔ∏è', ignore_case=True))
async def coffee(message: types.Message):
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {coffee_title[0]} \nCc—ã–ª–∫–∞: {coffee_urls[0]}')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {coffee_title[1]} \nCc—ã–ª–∫–∞: {coffee_urls[1]}')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {coffee_title[2]} \nCc—ã–ª–∫–∞: {coffee_urls[2]}')
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {coffee_title[3]} \nCc—ã–ª–∫–∞: {coffee_urls[3]}')

# @dp.message_handler(Text(equals='–ö–∞–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', ignore_case=True))
# async def theatre(message: types.Message):
#     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {theatre_title[0]} \n{theatre_urls[0]} \n–ê–¥—Ä–µ—Å: {theatre_address[0]}'
#                          f'\n–ù–∞—á–∞–ª–æ:{theatre_time[0]} \nC—Ç–æ–∏–º–æ—Å—Ç—å: {theatre_cash[0]}')
#     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {theatre_title[1]} \n{theatre_urls[1]} \n–ê–¥—Ä–µ—Å: {theatre_address[1]}'
#                          f'\n–ù–∞—á–∞–ª–æ: {theatre_time[1]} \nC—Ç–æ–∏–º–æ—Å—Ç—å: {theatre_cash[1]}')
#     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {theatre_title[2]} \n{theatre_urls[2]} \n–ê–¥—Ä–µ—Å: {theatre_address[2]}'
#                          f'\n–ù–∞—á–∞–ª–æ: {theatre_time[2]} \nC—Ç–æ–∏–º–æ—Å—Ç—å: {theatre_cash[2]}')
#     await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {theatre_title[3]} \n{theatre_urls[3]} \n–ê–¥—Ä–µ—Å: {theatre_address[3]}'
#                          f'\n–ù–∞—á–∞–ª–æ: {theatre_time[3]} \nC—Ç–æ–∏–º–æ—Å—Ç—å: {theatre_cash[3]}')


@dp.message_handler()
async def info(message: types.Message):
    global number, count_of_attempts

    try:
        if int(message.text) == number:
            await message.answer(f'–í—ã —É–≥–∞–¥–∞–ª–∏!üéâ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {count_of_attempts}')

        elif int(message.text) < number:
            await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ')
            count_of_attempts += 1
            await game(message)

        else:
            await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ')
            count_of_attempts += 1
            await game(message)
    except ValueError:
        await message.answer(f'–û—à–∏–±–∫–∞‚ùó\n–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø')
        await game(message)